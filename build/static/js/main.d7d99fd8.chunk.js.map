{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["schedule","terms","F","W","S","Banner","title","Course","course","id","charAt","getCourseTerm","slice","getCourseNumber","CourseList","courses","map","key","App","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uMAGMA,G,KAAW,CACf,MAAS,2BACT,QAAW,CACT,CACE,GAAM,OACN,MAAS,0DACT,MAAS,mBAEX,CACE,GAAM,OACN,MAAS,mCACT,MAAS,mBAEX,CACE,GAAM,OACN,MAAS,yCACT,MAAS,mBAEX,CACE,GAAM,OACN,MAAS,yCACT,MAAS,mBAEX,CACE,GAAM,OACN,MAAS,0CACT,MAAS,uBAKTC,EAAQ,CAAEC,EAAG,OAAQC,EAAG,SAAUC,EAAG,UAErCC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACb,4BAAMA,IAWFC,EAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACb,gCAToB,SAAAA,GAAM,OAC1BP,EAAMO,EAAOC,GAAGC,OAAO,IAQbC,CAAcH,GAAxB,OALsB,SAAAA,GAAM,OAC5BA,EAAOC,GAAGG,MAAM,EAAG,GAIoBC,CAAgBL,GAAvD,KAAoEA,EAAOF,QAGvEQ,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,6BACGA,EAAQC,KAAI,SAAAR,GAAM,OAAI,kBAAC,EAAD,CAAQS,IAAKT,EAAOC,GAAID,OAASA,SAItDU,EAAM,kBACV,6BACE,kBAAC,EAAD,CAAQZ,MAAQN,EAASM,QACzB,kBAAC,EAAD,CAAYS,QAAUf,EAASe,YAInCI,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,cAGXJ,QC1DKK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNR,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d7d99fd8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom'\n\nconst schedule = {\n  \"title\": \"CS Courses for 2018-2019\",\n  \"courses\": [\n    {\n      \"id\": \"F101\",\n      \"title\": \"Computer Science: Concepts, Philosophy, and Connections\",\n      \"meets\": \"MWF 11:00-11:50\"\n    },\n    {\n      \"id\": \"F110\",\n      \"title\": \"Intro Programming for non-majors\",\n      \"meets\": \"MWF 10:00-10:50\"\n    },\n    {\n      \"id\": \"F111\",\n      \"title\": \"Fundamentals of Computer Programming I\",\n      \"meets\": \"MWF 13:00-13:50\"\n    },\n    {\n      \"id\": \"W111\",\n      \"title\": \"Fundamentals of Computer Programming I\",\n      \"meets\": \"MWF 11:00-11:50\"\n    },\n    {\n      \"id\": \"F211\",\n      \"title\": \"Fundamentals of Computer Programming II\",\n      \"meets\": \"TuTh 12:30-13:50\"\n    }\n  ]\n};\n\nconst terms = { F: 'Fall', W: 'Winter', S: 'Spring'};\n\nconst Banner = ({ title }) => (\n  <h1>{ title }</h1>\n);\n\nconst getCourseTerm = course => (\n  terms[course.id.charAt(0)]\n);\n\nconst getCourseNumber = course => (\n  course.id.slice(1, 4)\n)\n  \nconst Course = ({ course }) => (\n  <button>{ getCourseTerm(course) } CS { getCourseNumber(course) }: { course.title }</button>\n);\n\nconst CourseList = ({ courses }) => (\n  <div>\n    {courses.map(course => <Course key={course.id} course={ course } />)}\n  </div>\n);\n\nconst App = () =>  (\n  <div>\n    <Banner title={ schedule.title } />\n    <CourseList courses={ schedule.courses } />\n  </div>\n);\n\nReactDOM.render(\n  <App />,\n  document.getElementById('container')\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}